// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_types is a generated GoMock package.
package mock_types

import (
	context "context"
	reflect "reflect"

	jrpc2 "github.com/creachadair/jrpc2"
	gomock "github.com/golang/mock/gomock"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Callback mocks base method.
func (m *MockServer) Callback(ctx context.Context, method string, params any) (*jrpc2.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", ctx, method, params)
	ret0, _ := ret[0].(*jrpc2.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Callback indicates an expected call of Callback.
func (mr *MockServerMockRecorder) Callback(ctx, method, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockServer)(nil).Callback), ctx, method, params)
}

// Notify mocks base method.
func (m *MockServer) Notify(ctx context.Context, method string, params any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, method, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockServerMockRecorder) Notify(ctx, method, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockServer)(nil).Notify), ctx, method, params)
}
