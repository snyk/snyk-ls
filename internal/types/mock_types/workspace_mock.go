// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/snyk/snyk-ls/internal/types (interfaces: Workspace,Folder)

// Package mock_types is a generated GoMock package.
package mock_types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/snyk/snyk-ls/internal/product"
	types "github.com/snyk/snyk-ls/internal/types"
	lsp "github.com/sourcegraph/go-lsp"
)

// MockWorkspace is a mock of Workspace interface.
type MockWorkspace struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceMockRecorder
}

// MockWorkspaceMockRecorder is the mock recorder for MockWorkspace.
type MockWorkspaceMockRecorder struct {
	mock *MockWorkspace
}

// NewMockWorkspace creates a new mock instance.
func NewMockWorkspace(ctrl *gomock.Controller) *MockWorkspace {
	mock := &MockWorkspace{ctrl: ctrl}
	mock.recorder = &MockWorkspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspace) EXPECT() *MockWorkspaceMockRecorder {
	return m.recorder
}

// AddFolder mocks base method.
func (m *MockWorkspace) AddFolder(arg0 types.Folder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFolder", arg0)
}

// AddFolder indicates an expected call of AddFolder.
func (mr *MockWorkspaceMockRecorder) AddFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockWorkspace)(nil).AddFolder), arg0)
}

// ChangeWorkspaceFolders mocks base method.
func (m *MockWorkspace) ChangeWorkspaceFolders(arg0 types.DidChangeWorkspaceFoldersParams) []types.Folder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeWorkspaceFolders", arg0)
	ret0, _ := ret[0].([]types.Folder)
	return ret0
}

// ChangeWorkspaceFolders indicates an expected call of ChangeWorkspaceFolders.
func (mr *MockWorkspaceMockRecorder) ChangeWorkspaceFolders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeWorkspaceFolders", reflect.TypeOf((*MockWorkspace)(nil).ChangeWorkspaceFolders), arg0)
}

// Clear mocks base method.
func (m *MockWorkspace) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockWorkspaceMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockWorkspace)(nil).Clear))
}

// ClearIssuesByType mocks base method.
func (m *MockWorkspace) ClearIssuesByType(arg0 product.FilterableIssueType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearIssuesByType", arg0)
}

// ClearIssuesByType indicates an expected call of ClearIssuesByType.
func (mr *MockWorkspaceMockRecorder) ClearIssuesByType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearIssuesByType", reflect.TypeOf((*MockWorkspace)(nil).ClearIssuesByType), arg0)
}

// DeleteFile mocks base method.
func (m *MockWorkspace) DeleteFile(arg0 types.FilePath) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFile", arg0)
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockWorkspaceMockRecorder) DeleteFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockWorkspace)(nil).DeleteFile), arg0)
}

// EndRequestTrustCommunication mocks base method.
func (m *MockWorkspace) EndRequestTrustCommunication() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndRequestTrustCommunication")
}

// EndRequestTrustCommunication indicates an expected call of EndRequestTrustCommunication.
func (mr *MockWorkspaceMockRecorder) EndRequestTrustCommunication() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndRequestTrustCommunication", reflect.TypeOf((*MockWorkspace)(nil).EndRequestTrustCommunication))
}

// Folders mocks base method.
func (m *MockWorkspace) Folders() []types.Folder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Folders")
	ret0, _ := ret[0].([]types.Folder)
	return ret0
}

// Folders indicates an expected call of Folders.
func (mr *MockWorkspaceMockRecorder) Folders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Folders", reflect.TypeOf((*MockWorkspace)(nil).Folders))
}

// GetFolderContaining mocks base method.
func (m *MockWorkspace) GetFolderContaining(arg0 types.FilePath) types.Folder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderContaining", arg0)
	ret0, _ := ret[0].(types.Folder)
	return ret0
}

// GetFolderContaining indicates an expected call of GetFolderContaining.
func (mr *MockWorkspaceMockRecorder) GetFolderContaining(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderContaining", reflect.TypeOf((*MockWorkspace)(nil).GetFolderContaining), arg0)
}

// GetFolderTrust mocks base method.
func (m *MockWorkspace) GetFolderTrust() ([]types.Folder, []types.Folder) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderTrust")
	ret0, _ := ret[0].([]types.Folder)
	ret1, _ := ret[1].([]types.Folder)
	return ret0, ret1
}

// GetFolderTrust indicates an expected call of GetFolderTrust.
func (mr *MockWorkspaceMockRecorder) GetFolderTrust() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderTrust", reflect.TypeOf((*MockWorkspace)(nil).GetFolderTrust))
}

// GetScanSnapshotClearerExister mocks base method.
func (m *MockWorkspace) GetScanSnapshotClearerExister() types.ScanSnapshotClearerExister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanSnapshotClearerExister")
	ret0, _ := ret[0].(types.ScanSnapshotClearerExister)
	return ret0
}

// GetScanSnapshotClearerExister indicates an expected call of GetScanSnapshotClearerExister.
func (mr *MockWorkspaceMockRecorder) GetScanSnapshotClearerExister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanSnapshotClearerExister", reflect.TypeOf((*MockWorkspace)(nil).GetScanSnapshotClearerExister))
}

// HandleConfigChange mocks base method.
func (m *MockWorkspace) HandleConfigChange() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleConfigChange")
}

// HandleConfigChange indicates an expected call of HandleConfigChange.
func (mr *MockWorkspaceMockRecorder) HandleConfigChange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConfigChange", reflect.TypeOf((*MockWorkspace)(nil).HandleConfigChange))
}

// IsTrustRequestOngoing mocks base method.
func (m *MockWorkspace) IsTrustRequestOngoing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrustRequestOngoing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTrustRequestOngoing indicates an expected call of IsTrustRequestOngoing.
func (mr *MockWorkspaceMockRecorder) IsTrustRequestOngoing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrustRequestOngoing", reflect.TypeOf((*MockWorkspace)(nil).IsTrustRequestOngoing))
}

// RemoveFolder mocks base method.
func (m *MockWorkspace) RemoveFolder(arg0 types.FilePath) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFolder", arg0)
}

// RemoveFolder indicates an expected call of RemoveFolder.
func (mr *MockWorkspaceMockRecorder) RemoveFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFolder", reflect.TypeOf((*MockWorkspace)(nil).RemoveFolder), arg0)
}

// ScanWorkspace mocks base method.
func (m *MockWorkspace) ScanWorkspace(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScanWorkspace", arg0)
}

// ScanWorkspace indicates an expected call of ScanWorkspace.
func (mr *MockWorkspaceMockRecorder) ScanWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanWorkspace", reflect.TypeOf((*MockWorkspace)(nil).ScanWorkspace), arg0)
}

// StartRequestTrustCommunication mocks base method.
func (m *MockWorkspace) StartRequestTrustCommunication() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartRequestTrustCommunication")
}

// StartRequestTrustCommunication indicates an expected call of StartRequestTrustCommunication.
func (mr *MockWorkspaceMockRecorder) StartRequestTrustCommunication() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRequestTrustCommunication", reflect.TypeOf((*MockWorkspace)(nil).StartRequestTrustCommunication))
}

// TrustFoldersAndScan mocks base method.
func (m *MockWorkspace) TrustFoldersAndScan(arg0 context.Context, arg1 []types.Folder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrustFoldersAndScan", arg0, arg1)
}

// TrustFoldersAndScan indicates an expected call of TrustFoldersAndScan.
func (mr *MockWorkspaceMockRecorder) TrustFoldersAndScan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrustFoldersAndScan", reflect.TypeOf((*MockWorkspace)(nil).TrustFoldersAndScan), arg0, arg1)
}

// MockFolder is a mock of Folder interface.
type MockFolder struct {
	ctrl     *gomock.Controller
	recorder *MockFolderMockRecorder
}

// MockFolderMockRecorder is the mock recorder for MockFolder.
type MockFolderMockRecorder struct {
	mock *MockFolder
}

// NewMockFolder creates a new mock instance.
func NewMockFolder(ctrl *gomock.Controller) *MockFolder {
	mock := &MockFolder{ctrl: ctrl}
	mock.recorder = &MockFolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolder) EXPECT() *MockFolderMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockFolder) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockFolderMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockFolder)(nil).Clear))
}

// ClearDiagnosticsByIssueType mocks base method.
func (m *MockFolder) ClearDiagnosticsByIssueType(arg0 product.FilterableIssueType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearDiagnosticsByIssueType", arg0)
}

// ClearDiagnosticsByIssueType indicates an expected call of ClearDiagnosticsByIssueType.
func (mr *MockFolderMockRecorder) ClearDiagnosticsByIssueType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDiagnosticsByIssueType", reflect.TypeOf((*MockFolder)(nil).ClearDiagnosticsByIssueType), arg0)
}

// Contains mocks base method.
func (m *MockFolder) Contains(arg0 types.FilePath) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockFolderMockRecorder) Contains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockFolder)(nil).Contains), arg0)
}

// FilterAndPublishDiagnostics mocks base method.
func (m *MockFolder) FilterAndPublishDiagnostics(arg0 product.Product) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FilterAndPublishDiagnostics", arg0)
}

// FilterAndPublishDiagnostics indicates an expected call of FilterAndPublishDiagnostics.
func (mr *MockFolderMockRecorder) FilterAndPublishDiagnostics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAndPublishDiagnostics", reflect.TypeOf((*MockFolder)(nil).FilterAndPublishDiagnostics), arg0)
}

// IsScanned mocks base method.
func (m *MockFolder) IsScanned() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsScanned")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsScanned indicates an expected call of IsScanned.
func (mr *MockFolderMockRecorder) IsScanned() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsScanned", reflect.TypeOf((*MockFolder)(nil).IsScanned))
}

// IsTrusted mocks base method.
func (m *MockFolder) IsTrusted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrusted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTrusted indicates an expected call of IsTrusted.
func (mr *MockFolderMockRecorder) IsTrusted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrusted", reflect.TypeOf((*MockFolder)(nil).IsTrusted))
}

// Name mocks base method.
func (m *MockFolder) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFolderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFolder)(nil).Name))
}

// Path mocks base method.
func (m *MockFolder) Path() types.FilePath {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(types.FilePath)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockFolderMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockFolder)(nil).Path))
}

// ScanFile mocks base method.
func (m *MockFolder) ScanFile(arg0 context.Context, arg1 types.FilePath) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScanFile", arg0, arg1)
}

// ScanFile indicates an expected call of ScanFile.
func (mr *MockFolderMockRecorder) ScanFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanFile", reflect.TypeOf((*MockFolder)(nil).ScanFile), arg0, arg1)
}

// ScanFolder mocks base method.
func (m *MockFolder) ScanFolder(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScanFolder", arg0)
}

// ScanFolder indicates an expected call of ScanFolder.
func (mr *MockFolderMockRecorder) ScanFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanFolder", reflect.TypeOf((*MockFolder)(nil).ScanFolder), arg0)
}

// ScanResultProcessor mocks base method.
func (m *MockFolder) ScanResultProcessor() func(context.Context, types.ScanData) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanResultProcessor")
	ret0, _ := ret[0].(func(context.Context, types.ScanData))
	return ret0
}

// ScanResultProcessor indicates an expected call of ScanResultProcessor.
func (mr *MockFolderMockRecorder) ScanResultProcessor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanResultProcessor", reflect.TypeOf((*MockFolder)(nil).ScanResultProcessor))
}

// SetStatus mocks base method.
func (m *MockFolder) SetStatus(arg0 types.FolderStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockFolderMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockFolder)(nil).SetStatus), arg0)
}

// Status mocks base method.
func (m *MockFolder) Status() types.FolderStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(types.FolderStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockFolderMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockFolder)(nil).Status))
}

// Uri mocks base method.
func (m *MockFolder) Uri() lsp.DocumentURI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uri")
	ret0, _ := ret[0].(lsp.DocumentURI)
	return ret0
}

// Uri indicates an expected call of Uri.
func (mr *MockFolderMockRecorder) Uri() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uri", reflect.TypeOf((*MockFolder)(nil).Uri))
}
