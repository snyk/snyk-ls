{
  "tools": [
    {
      "name": "snyk_auth",
      "description": "Before invoking this tool, snyk_auth_status should be called to check if authentication is needed. Links the Snyk MCP instance with a valid Snyk account, enabling communication with the Snyk platform for accessing vulnerability databases, reporting scan results, and managing projects. Authentication is a fundamental prerequisite for using the Snyk MCP server; most Snyk MCP scanning and monitoring commands will not function without successful authentication. \nWhen to use: This is the second step after defining the config environment (which is optional, when using the default Snyk instance) to set up the Snyk MCP scanner for issue, configuration and security vulnerability scanning.",
      "command": [
        "auth"
      ],
      "ignoreTrust": true,
      "standardParams": [],
      "params": [
        {
          "name": "debug",
          "type": "boolean",
          "isRequired": false,
          "description": "Enables debug logging for the authentication process. Useful for troubleshooting connection or authentication issues."
        }
      ]
    },
    {
      "name": "snyk_monitor",
      "description": "Before invoking this tool, snyk_auth_status should be called to check if authentication is needed. Takes a snapshot of a project's open-source dependencies and sends this to the Snyk platform (snyk.io). This creates a project in the Snyk UI for continuous monitoring against newly disclosed vulnerabilities and license issues. It does not monitor Snyk Code (SAST) issues; those are typically monitored via SCM integration. \nWhen to use: Typically used before a project is integrated into a production environment or as a baseline for a significant release. If dependencies change significantly, `snyk monitor` must be re-run to update the snapshot. \nDifference from `snyk test`: `snyk test` provides immediate, one-time feedback for active development and CI. `snyk monitor` establishes long-term, ongoing surveillance of a specific project snapshot, alerting to new vulnerabilities discovered in existing dependencies *after* the snapshot. \nSecure SDLC Integration: Used in Pre-production or Release stages to establish a baseline. The Snyk platform then continuously tracks this 'bill of materials' for new issues. Re-run to update the snapshot as the project evolves. The rich metadata options (`project_tags`, etc.) enhance manageability in the Snyk UI, especially for large enterprises. Exit codes: `0` for success, `2` for failure, `3` for no supported projects.",
      "command": [
        "monitor"
      ],
      "standardParams": [
        "all_projects"
      ],
      "params": [
        {
          "name": "path",
          "type": "string",
          "isRequired": true,
          "description": "Positional argument for the *absolute path* to directory. The path MUST be absolute and have the correct path separator. You can retrieve the absolute path by invoking `pwd` on the command line in the working directory. Example: `/a/my-project` on linux/macOS or, on Windows `C:\\a\\my-project`",
          "isPositional": true
        },
        {
          "name": "all_projects",
          "type": "boolean",
          "isRequired": false,
          "description": "Auto-detects and monitors all supported projects in the working directory. Mutually exclusive with `maven_aggregate_project` for Maven."
        },
        {
          "name": "fail-fast",
          "type": "boolean",
          "isRequired": false,
          "description": "With `all_projects`, interrupts scans on errors and reports them."
        },
        {
          "name": "detection_depth",
          "type": "integer",
          "isRequired": false,
          "description": "Specifies subdirectory search depth (integer >= 0) for `all_projects` or `yarn_workspaces`. Default is no limit."
        },
        {
          "name": "exclude",
          "type": "string",
          "isRequired": false,
          "description": "Comma-separated list of directory or file names to exclude with `all_projects` or `yarn_workspaces`."
        },
        {
          "name": "prune_repeated_subdependencies",
          "type": "boolean",
          "isRequired": false,
          "description": "Prunes dependency trees in the snapshot, removing duplicate sub-dependencies (alias `-p`). Default false."
        },
        {
          "name": "print_deps",
          "type": "boolean",
          "isRequired": false,
          "description": "Prints the dependency tree before analysis."
        },
        {
          "name": "remote_repo_url",
          "type": "string",
          "isRequired": false,
          "description": "Sets or overrides the remote repository URL for the project in Snyk UI."
        },
        {
          "name": "dev",
          "type": "boolean",
          "isRequired": false,
          "description": "Includes development-only dependencies in the monitored snapshot. Applicable for Maven, npm, Yarn. Default false."
        },
        {
          "name": "org",
          "type": "string",
          "isRequired": false,
          "description": "Specifies the Snyk Organization ID (or slug name) for the monitored project. Default is the Snyk configured org."
        },
        {
          "name": "file",
          "type": "string",
          "isRequired": false,
          "description": "Specifies a particular package manifest file to monitor. Default is auto-detected."
        },
        {
          "name": "package_manager",
          "type": "string",
          "isRequired": false,
          "description": "Specifies package manager (e.g., `pip`, `maven`) if `file` is non-standard. Default is auto-detected."
        },
        {
          "name": "unmanaged",
          "type": "boolean",
          "isRequired": false,
          "description": "For C++ only (in this context), monitors projects with unmanaged dependencies."
        },
        {
          "name": "ignore_policy",
          "type": "boolean",
          "isRequired": false,
          "description": "Ignores all set policies for this snapshot."
        },
        {
          "name": "trust_policies",
          "type": "boolean",
          "isRequired": false,
          "description": "Applies ignore rules from Snyk policies in dependencies for the snapshot."
        },
        {
          "name": "project_name",
          "type": "string",
          "isRequired": false,
          "description": "Specifies a custom Snyk project name in the UI. Default is auto-generated."
        },
        {
          "name": "target_reference",
          "type": "string",
          "isRequired": false,
          "description": "Specifies a reference (e.g., branch name, version) to differentiate this project snapshot. Projects with the same reference can be grouped in Snyk UI. Supported for Snyk Open Source and with `unmanaged`."
        },
        {
          "name": "policy_path",
          "type": "string",
          "isRequired": false,
          "description": "Manually provides a path to a `.snyk` policy file. Default is `.snyk` in root."
        },
        {
          "name": "project_environment",
          "type": "string",
          "isRequired": false,
          "description": "Sets the project environment attribute(s) in Snyk UI (e.g., `production,frontend`). Comma-separated from an allowed list."
        },
        {
          "name": "project_lifecycle",
          "type": "string",
          "isRequired": false,
          "description": "Sets the project lifecycle attribute(s) in Snyk UI (e.g., `production,sandbox`). Comma-separated from an allowed list."
        },
        {
          "name": "project_business_criticality",
          "type": "string",
          "isRequired": false,
          "description": "Sets the project business criticality attribute(s) in Snyk UI (e.g., `critical,high`). Comma-separated from an allowed list."
        },
        {
          "name": "project_tags",
          "type": "string",
          "isRequired": false,
          "description": "Sets project tags in Snyk UI as comma-separated key-value pairs (e.g., `department=finance,team=alpha`). Alias `tags`."
        },
        {
          "name": "maven_aggregate_project",
          "type": "boolean",
          "isRequired": false,
          "description": "For multi-module Maven projects. Monitors all modules. Cannot be used with `all_projects`.",
          "supersedesParams": [
            "all_projects"
          ]
        }
      ]
    },
    {
      "name": "snyk_code_scan_remote",
      "description": "Before invoking this tool, snyk_auth_status should be called to check if authentication is needed. Performs Static Application Security Testing (SAST) directly from the Snyk MCP. It analyzes an application's source code to identify security vulnerabilities and weaknesses without executing the code. \nWhen to use: During local development, developers can run it on their feature branches for immediate feedback. In CI/CD pipelines, it can be incorporated to automatically scan code changes on every build, pull request, or merge, providing a security gate for code quality. \nHow to use: Test  directory: run snyk_code_scan with parameter <path>, add parameters as needed. Save JSON results for medium+ severity: run snyk_code_scan with parameters `path` `json_file_output`=`sast.json` `severity_threshold`=`medium`. \nNote: If `json_file_output` is used and no issues are found, the output file is not created. \nExit Codes: `0` for success/no issues matching criteria, `1` for issues found, `2` for scan error. \nSecure SDLC Integration: Enables embedding Snyk Code's analytical capabilities directly into automated build and test sequences. In the Coding phase, developers get local feedback. In CI/CD, it automates code scanning, acting as a security gate.",
      "command": [
      ],
      "standardParams": [],
      "params": [
        {
          "name": "code_files",
          "type": "array",
          "IsRequired": true,
          "description": "List of directories with 'fileName' and 'content' keys"
        }
      ]
    },
    {
      "name": "snyk_ignore",
      "description": "Modifies the project's `.snyk` policy file to ignore specific issues (vulnerabilities, license issues via `id`) or to exclude files/directories from analysis (primarily for Snyk Code and Open Source `unmanaged` scans via `file_path`). \nWhen to use: For risk acceptance (documenting why a vulnerability is acceptable). For Snyk Code scope management (excluding test/generated code). \nHow it modifies `.snyk`: Adds/updates entries in `ignore:` block (for ID-based ignores) or `exclude:` block (for file exclusions). \nHow to use: Ignore npm vuln with expiry/reason: `<snyk_ignore> `id`=`'npm:tough-cookie:20160722'` `expiry`=`'2024-12-31'` `reason`=`'Not exploitable'`. Ignore by path: <snyk_ignore> `id`=`'SNYK-JS-LIB-XXX'` `vulnerable_path`=`'app>pkg>lib'`. Exclude test files from Snyk Code: <snyk_ignore> `file_path`=`'./**/test/**'` `file_path-group`=`'code'`. Ignore IaC misconfig: <snyk_ignore> `id`=`SNYK-CC-TF-118` `path`=`\"resource > type > name\"`. \nSecure SDLC Integration: Vulnerability Management/Triage: Allows teams to formally document and manage accepted risks or refine scan scope as 'policy as code' within the `.snyk` file, which is version controlled with the project.",
      "command": [
        "ignore"
      ],
      "ignoreTrust": true,
      "standardParams": [],
      "params": [
        {
          "name": "path",
          "type": "string",
          "isRequired": true,
          "description": "Positional argument for the *ABSOLUTE PATH* to the policy .snyk file. The path MUST be absolute and have the correct path separator.",
          "isPositional": true
        },
        {
          "name": "id",
          "type": "string",
          "isRequired": false,
          "description": "The Snyk ID of the vulnerability or license issue to ignore (e.g., `SNYK-JS-LODASH-123456`, `snyk:lic:npm:package:MIT`). Required unless `file_path` is used. Mutually exclusive with `file_path` for primary mode."
        },
        {
          "name": "expiry",
          "type": "string",
          "isRequired": false,
          "description": "Sets an expiration date for the ignore rule (YYYY-MM-DD, ISO 8601, RFC 2822). After this, Snyk reports the issue again. Default for ID-based ignore is 30 days; no default expiry if used with `file_path`."
        },
        {
          "name": "reason",
          "type": "string",
          "isRequired": false,
          "description": "Human-readable justification for ignoring the issue, recorded in `.snyk` file. Not supported for Snyk Code ignores (which use `file_path`). Default 'None given' or empty."
        },
        {
          "name": "policy_path",
          "type": "string",
          "isRequired": false,
          "description": "Specifies path to the `.snyk` policy file to modify. Default is `.snyk` in current directory."
        },
        {
          "name": "vulnerable_path",
          "type": "string",
          "isRequired": false,
          "description": "For vulnerability ignores (`id`), specifies the particular vulnerable path in dependency tree (e.g., `A>B>C`). For IaC issues, this is the resource path from `snyk iac test` output. If omitted, ignore applies to all paths (`*`)."
        },
        {
          "name": "file_path",
          "type": "string",
          "isRequired": false,
          "description": "File system path (can include globs like `**/*.test.js`) to exclude from scanning. Primarily for Snyk Code (SAST) and Snyk Open Source `unmanaged` tests. Mutually exclusive with `id` for primary mode."
        },
        {
          "name": "file_path_group",
          "type": "string",
          "isRequired": false,
          "description": "With `file_path`, groups exclusion rule under a category in `.snyk` exclude block. Accepted values: `global`, `code`, `iac-drift`."
        },
        {
          "name": "debug",
          "type": "boolean",
          "isRequired": false,
          "description": "Enables debug logging for the ignore operation. Use as `-d`."
        }
      ]
    },
    {
      "name": "snyk_version",
      "description": "Displays the installed Snyk MCP version. \nWhen to use: To verify current CLI version for compatibility checks or when reporting issues. \nHow to use: `$ snyk version`. \nSecure SDLC Integration: Setup/Maintenance: Helps ensure the correct and up-to-date version of the CLI is being used in development and CI/CD environments.",
      "command": [
        "version"
      ],
      "ignoreTrust": true,
      "standardParams": [],
      "params": []
    },
    {
      "name": "snyk_auth_status",
      "description": "Checks and displays the current Snyk authentication status, including the API token endpoint and the user you are authenticated as. Uses the experimental `whoami` command. \nWhen to use: To verify if the CLI is properly authenticated and to which user/organization context it is linked, especially helpful in troubleshooting or multi-account scenarios. \nHow to use: <snyk_auth_status>. \nSecure SDLC Integration: Setup/Troubleshooting: Useful during initial setup or when debugging CLI interactions to ensure commands are executed with the correct identity and permissions.",
      "command": [
        "whoami"
      ],
      "ignoreTrust": true,
      "standardParams": ["experimental"],
      "params": []
    },
    {
      "name": "snyk_logout",
      "description": "Logs the Snyk MCP out of the current Snyk account by clearing the locally stored authentication token. \nWhen to use: When needing to switch Snyk accounts, or to ensure a clean state by removing existing authentication from the local machine or CI environment. \nHow to use: `<snyk_logout>`. \nSecure SDLC Integration: Teardown/Security: Used to securely remove CLI authentication, for instance, when decommissioning a build agent or a developer's machine access, or when needing to re-authenticate with different credentials.",
      "command": [
        "logout"
      ],
      "ignoreTrust": true,
      "standardParams": [],
      "params": []
    },
    {
      "name": "snyk_aibom",
      "description": "Before invoking this tool, snyk_auth_status should be called to check if authentication is needed. Generates an AI Bill of Materials (AIBOM) for Python software projects in CycloneDX v1.6 JSON format. This experimental feature analyzes local Python projects to identify AI models, datasets, tools, and other AI-related components. Requires an active internet connection and access to the experimental feature (available to customers on request). The command must be run from within a Python project directory and requires the CLI from the preview release channel. \nWhen to use: When you need to create an inventory of AI components in a Python project for compliance, security analysis, or documentation purposes.",
      "command": [
        "aibom"
      ],
      "standardParams": [
        "experimental"
      ],
      "params": [
        {
          "name": "path",
          "type": "string",
          "isRequired": true,
          "isPositional": true,
          "description": "Positional argument for the *ABSOLUTE PATH* to the directory to be scanned. The path MUST be absolute and have the correct path separator. You can retrieve the absolute path by invoking `pwd` on the command line in the working directory. Example: `/a/my-project` on linux/macOS or, on Windows `C:\\a\\my-project`."
        },
        {
          "name": "json_file_output",
          "type": "string",
          "description": "Saves the AIBOM output as a JSON data structure to the specified file path. The target directory must exist and be writable."
        }
      ]
    },
    {
      "name": "snyk_trust",
      "description": "Trust a given folder to allow Snyk to scan it",
      "command": [],
      "standardParams": [],
      "ignoreTrust": true,
      "params":
      [
        {
          "name": "path",
          "type": "string",
          "isRequired": true,
          "description": "Path to the project folder to trust (default is the absolute path of the current directory, formatted according to the operating system's conventions)."
        }
      ]
    }
  ]
}


