/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package oss

import (
	"math"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/snyk/snyk-ls/domain/snyk"
	"github.com/snyk/snyk-ls/infrastructure/cli"
	"github.com/snyk/snyk-ls/internal/notification"
	"github.com/snyk/snyk-ls/internal/observability/error_reporting"
	"github.com/snyk/snyk-ls/internal/observability/performance"
	"github.com/snyk/snyk-ls/internal/testutil"
)

const vulnCountTestFilePath = "/test/filePath"

// Test if the method DetermineVulnerabilityCounts groups issues correctly
// and calls the processor function with the correct VulnerabilityCountInformation
func TestVulnerabilityCountImpl_ProcessVulnerabilityCount_CountWithinFile(t *testing.T) {
	c := testutil.UnitTest(t)
	r := testRange()
	issues := testIssues(vulnCountTestFilePath, r)

	vc := NewVulnerabilityCountService(c)
	counts, err := vc.DetermineVulnerabilityCounts(issues)
	vci := counts[vulnCountTestFilePath][r]

	assert.NoError(t, err)
	assert.Equal(t, vulnCountTestFilePath, vci.path)
	assert.Equal(t, r, vci.Range())
	assert.Equal(t, 4, vci.total)
	assert.Equal(t, 1, vci.severityCounts[snyk.High])
	assert.Equal(t, 3, vci.severityCounts[snyk.Medium])
	assert.Equal(t, "id1", vci.mostSevereVulnerabilityId)
}

func TestVulnerabilityCountImpl_ProcessVulnerabilityCount_GroupByFile(t *testing.T) {
	c := testutil.UnitTest(t)
	r := snyk.Range{
		Start: snyk.Position{
			Line: 10,
		},
		End: snyk.Position{
			Line:      10,
			Character: math.MaxInt32,
		},
	}
	filePath := "/test/filePath"
	filePath2 := "/test/filePath2"
	issues := []snyk.Issue{
		{
			ID:               "id1",
			Severity:         snyk.High,
			AffectedFilePath: filePath,
			Range:            r,
		},
		{
			ID:               "id2",
			Severity:         snyk.Medium,
			AffectedFilePath: filePath2,
			Range:            r,
		},
	}

	vc := NewVulnerabilityCountService(c)
	counts, err := vc.DetermineVulnerabilityCounts(issues)
	assert.NoError(t, err)

	vci1 := counts[filePath][r]
	assert.Equal(t, 1, vci1.total)
	assert.Equal(t, 1, vci1.severityCounts[snyk.High])
	assert.Equal(t, "id1", vci1.mostSevereVulnerabilityId)

	vci2 := counts[filePath2][r]
	assert.Equal(t, 1, vci2.total)
	assert.Equal(t, 1, vci2.severityCounts[snyk.Medium])
	assert.Equal(t, "id2", vci2.mostSevereVulnerabilityId)
}

func TestVulnerabilityCountImpl_ProcessVulnerabilityCount_GroupByRange(t *testing.T) {
	c := testutil.UnitTest(t)
	range1 := snyk.Range{
		Start: snyk.Position{
			Line: 10,
		},
		End: snyk.Position{
			Line:      10,
			Character: math.MaxInt32,
		},
	}
	range2 := snyk.Range{
		Start: snyk.Position{
			Line: 11,
		},
		End: snyk.Position{
			Line:      11,
			Character: math.MaxInt32,
		},
	}
	filePath := "/test/filePath"
	issues := []snyk.Issue{
		{
			ID:               "id1",
			Severity:         snyk.High,
			AffectedFilePath: filePath,
			Range:            range1,
		},
		{
			ID:               "id2",
			Severity:         snyk.Medium,
			AffectedFilePath: filePath,
			Range:            range2,
		},
	}

	vc := NewVulnerabilityCountService(c)
	counts, err := vc.DetermineVulnerabilityCounts(issues)

	assert.NoError(t, err)

	vci1 := counts[vulnCountTestFilePath][range1]
	assert.Equal(t, 1, vci1.total)
	assert.Equal(t, 1, vci1.severityCounts[snyk.High])
	assert.Equal(t, "id1", vci1.mostSevereVulnerabilityId)

	vci2 := counts[vulnCountTestFilePath][range2]
	assert.Equal(t, 1, vci2.total)
	assert.Equal(t, 1, vci2.severityCounts[snyk.Medium])
	assert.Equal(t, "id2", vci2.mostSevereVulnerabilityId)
}

func TestScanner_toInlineValueAndAddToCache_shouldAddInlineValueToCache(t *testing.T) {
	c := testutil.UnitTest(t)
	scanner := NewCLIScanner(c, performance.NewInstrumentor(), error_reporting.NewTestErrorReporter(), cli.NewTestExecutor(), getLearnMock(t), notification.NewNotifier()).(*CLIScanner)
	myRange := testRange()
	vci := VulnerabilityCountInformation{
		path:                      vulnCountTestFilePath,
		myRange:                   myRange,
		total:                     12,
		severityCounts:            make(map[snyk.Severity]int),
		mostSevereVulnerabilityId: "abcd",
	}

	scanner.addToCache(&vci, scanner.inlineValues)

	value := scanner.inlineValues[vulnCountTestFilePath][0]
	assert.Equal(t, myRange.Start.Line, value.Range().Start.Line)
	assert.Contains(t, value.Text(), "Issues: 12")
}

func TestScanner_addVulnerabilityCountsAsInlineValuesToCache(t *testing.T) {
	c := testutil.UnitTest(t)
	scanner := NewCLIScanner(c, performance.NewInstrumentor(), error_reporting.NewTestErrorReporter(), cli.NewTestExecutor(), getLearnMock(t), notification.NewNotifier()).(*CLIScanner)

	// we want issues from two ranges in the same file
	r1 := testRange()
	r2 := r1
	r2.Start.Line = r1.Start.Line + 1
	r2.End.Line = r1.Start.Line + 1
	issues := append(testIssues(vulnCountTestFilePath, r1), testIssues(vulnCountTestFilePath, r2)...)

	scanner.addVulnerabilityCountsToCache(issues)

	inlineValues := scanner.inlineValues[vulnCountTestFilePath]
	assert.Len(t, inlineValues, 2)
}

func testIssues(filePath string, r snyk.Range) []snyk.Issue {
	return []snyk.Issue{
		{
			ID:               "id1",
			Severity:         snyk.High,
			AffectedFilePath: filePath,
			Range:            r,
		},
		{
			ID:               "id2",
			Severity:         snyk.Medium,
			AffectedFilePath: filePath,
			Range:            r,
		},
		{
			ID:               "id3",
			Severity:         snyk.Medium,
			AffectedFilePath: filePath,
			Range:            r,
		},
		{
			ID:               "id4",
			Severity:         snyk.Medium,
			AffectedFilePath: filePath,
			Range:            r,
		},
	}
}

func testRange() snyk.Range {
	return snyk.Range{
		Start: snyk.Position{
			Line: 10,
		},
		End: snyk.Position{
			Line:      10,
			Character: math.MaxInt32,
		},
	}
}
