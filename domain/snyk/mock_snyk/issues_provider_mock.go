// Code generated by MockGen. DO NOT EDIT.
// Source: issues_provider.go

// Package mock_snyk is a generated GoMock package.
package mock_snyk

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	snyk "github.com/snyk/snyk-ls/domain/snyk"
	product "github.com/snyk/snyk-ls/internal/product"
	types "github.com/snyk/snyk-ls/internal/types"
)

// MockIssueProvider is a mock of IssueProvider interface.
type MockIssueProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIssueProviderMockRecorder
}

// MockIssueProviderMockRecorder is the mock recorder for MockIssueProvider.
type MockIssueProviderMockRecorder struct {
	mock *MockIssueProvider
}

// NewMockIssueProvider creates a new mock instance.
func NewMockIssueProvider(ctrl *gomock.Controller) *MockIssueProvider {
	mock := &MockIssueProvider{ctrl: ctrl}
	mock.recorder = &MockIssueProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueProvider) EXPECT() *MockIssueProviderMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockIssueProvider) Issue(key string) types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", key)
	ret0, _ := ret[0].(types.Issue)
	return ret0
}

// Issue indicates an expected call of Issue.
func (mr *MockIssueProviderMockRecorder) Issue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockIssueProvider)(nil).Issue), key)
}

// Issues mocks base method.
func (m *MockIssueProvider) Issues() snyk.IssuesByFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issues")
	ret0, _ := ret[0].(snyk.IssuesByFile)
	return ret0
}

// Issues indicates an expected call of Issues.
func (mr *MockIssueProviderMockRecorder) Issues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockIssueProvider)(nil).Issues))
}

// IssuesForFile mocks base method.
func (m *MockIssueProvider) IssuesForFile(path types.FilePath) []types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuesForFile", path)
	ret0, _ := ret[0].([]types.Issue)
	return ret0
}

// IssuesForFile indicates an expected call of IssuesForFile.
func (mr *MockIssueProviderMockRecorder) IssuesForFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesForFile", reflect.TypeOf((*MockIssueProvider)(nil).IssuesForFile), path)
}

// IssuesForRange mocks base method.
func (m *MockIssueProvider) IssuesForRange(path types.FilePath, r types.Range) []types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuesForRange", path, r)
	ret0, _ := ret[0].([]types.Issue)
	return ret0
}

// IssuesForRange indicates an expected call of IssuesForRange.
func (mr *MockIssueProviderMockRecorder) IssuesForRange(path, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesForRange", reflect.TypeOf((*MockIssueProvider)(nil).IssuesForRange), path, r)
}

// MockCacheProvider is a mock of CacheProvider interface.
type MockCacheProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCacheProviderMockRecorder
}

// MockCacheProviderMockRecorder is the mock recorder for MockCacheProvider.
type MockCacheProviderMockRecorder struct {
	mock *MockCacheProvider
}

// NewMockCacheProvider creates a new mock instance.
func NewMockCacheProvider(ctrl *gomock.Controller) *MockCacheProvider {
	mock := &MockCacheProvider{ctrl: ctrl}
	mock.recorder = &MockCacheProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheProvider) EXPECT() *MockCacheProviderMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockCacheProvider) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockCacheProviderMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCacheProvider)(nil).Clear))
}

// ClearIssues mocks base method.
func (m *MockCacheProvider) ClearIssues(path types.FilePath) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearIssues", path)
}

// ClearIssues indicates an expected call of ClearIssues.
func (mr *MockCacheProviderMockRecorder) ClearIssues(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearIssues", reflect.TypeOf((*MockCacheProvider)(nil).ClearIssues), path)
}

// IsProviderFor mocks base method.
func (m *MockCacheProvider) IsProviderFor(issueType product.FilterableIssueType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProviderFor", issueType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProviderFor indicates an expected call of IsProviderFor.
func (mr *MockCacheProviderMockRecorder) IsProviderFor(issueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProviderFor", reflect.TypeOf((*MockCacheProvider)(nil).IsProviderFor), issueType)
}

// Issue mocks base method.
func (m *MockCacheProvider) Issue(key string) types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", key)
	ret0, _ := ret[0].(types.Issue)
	return ret0
}

// Issue indicates an expected call of Issue.
func (mr *MockCacheProviderMockRecorder) Issue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockCacheProvider)(nil).Issue), key)
}

// Issues mocks base method.
func (m *MockCacheProvider) Issues() snyk.IssuesByFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issues")
	ret0, _ := ret[0].(snyk.IssuesByFile)
	return ret0
}

// Issues indicates an expected call of Issues.
func (mr *MockCacheProviderMockRecorder) Issues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockCacheProvider)(nil).Issues))
}

// IssuesForFile mocks base method.
func (m *MockCacheProvider) IssuesForFile(path types.FilePath) []types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuesForFile", path)
	ret0, _ := ret[0].([]types.Issue)
	return ret0
}

// IssuesForFile indicates an expected call of IssuesForFile.
func (mr *MockCacheProviderMockRecorder) IssuesForFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesForFile", reflect.TypeOf((*MockCacheProvider)(nil).IssuesForFile), path)
}

// IssuesForRange mocks base method.
func (m *MockCacheProvider) IssuesForRange(path types.FilePath, r types.Range) []types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuesForRange", path, r)
	ret0, _ := ret[0].([]types.Issue)
	return ret0
}

// IssuesForRange indicates an expected call of IssuesForRange.
func (mr *MockCacheProviderMockRecorder) IssuesForRange(path, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesForRange", reflect.TypeOf((*MockCacheProvider)(nil).IssuesForRange), path, r)
}

// RegisterCacheRemovalHandler mocks base method.
func (m *MockCacheProvider) RegisterCacheRemovalHandler(handler func(types.FilePath)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCacheRemovalHandler", handler)
}

// RegisterCacheRemovalHandler indicates an expected call of RegisterCacheRemovalHandler.
func (mr *MockCacheProviderMockRecorder) RegisterCacheRemovalHandler(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCacheRemovalHandler", reflect.TypeOf((*MockCacheProvider)(nil).RegisterCacheRemovalHandler), handler)
}

// MockFilteringIssueProvider is a mock of FilteringIssueProvider interface.
type MockFilteringIssueProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFilteringIssueProviderMockRecorder
}

// MockFilteringIssueProviderMockRecorder is the mock recorder for MockFilteringIssueProvider.
type MockFilteringIssueProviderMockRecorder struct {
	mock *MockFilteringIssueProvider
}

// NewMockFilteringIssueProvider creates a new mock instance.
func NewMockFilteringIssueProvider(ctrl *gomock.Controller) *MockFilteringIssueProvider {
	mock := &MockFilteringIssueProvider{ctrl: ctrl}
	mock.recorder = &MockFilteringIssueProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilteringIssueProvider) EXPECT() *MockFilteringIssueProviderMockRecorder {
	return m.recorder
}

// FilterIssues mocks base method.
func (m *MockFilteringIssueProvider) FilterIssues(issues snyk.IssuesByFile, supportedIssueTypes map[product.FilterableIssueType]bool) snyk.IssuesByFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterIssues", issues, supportedIssueTypes)
	ret0, _ := ret[0].(snyk.IssuesByFile)
	return ret0
}

// FilterIssues indicates an expected call of FilterIssues.
func (mr *MockFilteringIssueProviderMockRecorder) FilterIssues(issues, supportedIssueTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterIssues", reflect.TypeOf((*MockFilteringIssueProvider)(nil).FilterIssues), issues, supportedIssueTypes)
}

// Issue mocks base method.
func (m *MockFilteringIssueProvider) Issue(key string) types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", key)
	ret0, _ := ret[0].(types.Issue)
	return ret0
}

// Issue indicates an expected call of Issue.
func (mr *MockFilteringIssueProviderMockRecorder) Issue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockFilteringIssueProvider)(nil).Issue), key)
}

// Issues mocks base method.
func (m *MockFilteringIssueProvider) Issues() snyk.IssuesByFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issues")
	ret0, _ := ret[0].(snyk.IssuesByFile)
	return ret0
}

// Issues indicates an expected call of Issues.
func (mr *MockFilteringIssueProviderMockRecorder) Issues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockFilteringIssueProvider)(nil).Issues))
}

// IssuesForFile mocks base method.
func (m *MockFilteringIssueProvider) IssuesForFile(path types.FilePath) []types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuesForFile", path)
	ret0, _ := ret[0].([]types.Issue)
	return ret0
}

// IssuesForFile indicates an expected call of IssuesForFile.
func (mr *MockFilteringIssueProviderMockRecorder) IssuesForFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesForFile", reflect.TypeOf((*MockFilteringIssueProvider)(nil).IssuesForFile), path)
}

// IssuesForRange mocks base method.
func (m *MockFilteringIssueProvider) IssuesForRange(path types.FilePath, r types.Range) []types.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuesForRange", path, r)
	ret0, _ := ret[0].([]types.Issue)
	return ret0
}

// IssuesForRange indicates an expected call of IssuesForRange.
func (mr *MockFilteringIssueProviderMockRecorder) IssuesForRange(path, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesForRange", reflect.TypeOf((*MockFilteringIssueProvider)(nil).IssuesForRange), path, r)
}
