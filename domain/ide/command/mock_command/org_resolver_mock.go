// Code generated by MockGen. DO NOT EDIT.
// Source: org_resolver.go

// Package mock_command is a generated GoMock package.
package mock_command

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
	ldx_sync_config "github.com/snyk/go-application-framework/pkg/apiclients/ldx_sync_config"
	configuration "github.com/snyk/go-application-framework/pkg/configuration"
	workflow "github.com/snyk/go-application-framework/pkg/workflow"
)

// MockOrgResolver is a mock of OrgResolver interface.
type MockOrgResolver struct {
	ctrl     *gomock.Controller
	recorder *MockOrgResolverMockRecorder
}

// MockOrgResolverMockRecorder is the mock recorder for MockOrgResolver.
type MockOrgResolverMockRecorder struct {
	mock *MockOrgResolver
}

// NewMockOrgResolver creates a new mock instance.
func NewMockOrgResolver(ctrl *gomock.Controller) *MockOrgResolver {
	mock := &MockOrgResolver{ctrl: ctrl}
	mock.recorder = &MockOrgResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgResolver) EXPECT() *MockOrgResolverMockRecorder {
	return m.recorder
}

// ResolveOrganization mocks base method.
func (m *MockOrgResolver) ResolveOrganization(config configuration.Configuration, engine workflow.Engine, logger *zerolog.Logger, dir string) (ldx_sync_config.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveOrganization", config, engine, logger, dir)
	ret0, _ := ret[0].(ldx_sync_config.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveOrganization indicates an expected call of ResolveOrganization.
func (mr *MockOrgResolverMockRecorder) ResolveOrganization(config, engine, logger, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveOrganization", reflect.TypeOf((*MockOrgResolver)(nil).ResolveOrganization), config, engine, logger, dir)
}
